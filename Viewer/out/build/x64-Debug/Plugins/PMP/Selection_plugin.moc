/****************************************************************************
** Meta object code from reading C++ file 'Selection_plugin.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.9)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qplugin.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'Selection_plugin.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.9. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_Polyhedron_demo_selection_plugin_t {
    QByteArrayData data[47];
    char stringdata0[1035];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_Polyhedron_demo_selection_plugin_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_Polyhedron_demo_selection_plugin_t qt_meta_stringdata_Polyhedron_demo_selection_plugin = {
    {
QT_MOC_LITERAL(0, 0, 32), // "Polyhedron_demo_selection_plugin"
QT_MOC_LITERAL(1, 33, 15), // "save_handleType"
QT_MOC_LITERAL(2, 49, 0), // ""
QT_MOC_LITERAL(3, 50, 18), // "set_operation_mode"
QT_MOC_LITERAL(4, 69, 16), // "set_highlighting"
QT_MOC_LITERAL(5, 86, 35), // "on_actionSelfIntersection_tri..."
QT_MOC_LITERAL(6, 122, 11), // "connectItem"
QT_MOC_LITERAL(7, 134, 32), // "Scene_polyhedron_selection_item*"
QT_MOC_LITERAL(8, 167, 8), // "new_item"
QT_MOC_LITERAL(9, 176, 19), // "isCurrentlySelected"
QT_MOC_LITERAL(10, 196, 38), // "Scene_facegraph_item_k_ring_s..."
QT_MOC_LITERAL(11, 235, 4), // "item"
QT_MOC_LITERAL(12, 240, 15), // "setInstructions"
QT_MOC_LITERAL(13, 256, 1), // "s"
QT_MOC_LITERAL(14, 258, 12), // "printMessage"
QT_MOC_LITERAL(15, 271, 16), // "selection_action"
QT_MOC_LITERAL(16, 288, 12), // "onTheFlyItem"
QT_MOC_LITERAL(17, 301, 28), // "on_Select_all_button_clicked"
QT_MOC_LITERAL(18, 330, 30), // "on_Select_all_NTButton_clicked"
QT_MOC_LITERAL(19, 361, 32), // "on_Select_boundaryButton_clicked"
QT_MOC_LITERAL(20, 394, 34), // "on_Add_to_selection_button_cl..."
QT_MOC_LITERAL(21, 429, 23), // "on_Clear_button_clicked"
QT_MOC_LITERAL(22, 453, 27), // "on_Clear_all_button_clicked"
QT_MOC_LITERAL(23, 481, 35), // "on_Inverse_selection_button_c..."
QT_MOC_LITERAL(24, 517, 44), // "on_Select_isolated_components..."
QT_MOC_LITERAL(25, 562, 29), // "on_Get_minimum_button_clicked"
QT_MOC_LITERAL(26, 592, 39), // "on_Create_selection_item_butt..."
QT_MOC_LITERAL(27, 632, 24), // "on_LassoCheckBox_changed"
QT_MOC_LITERAL(28, 657, 1), // "b"
QT_MOC_LITERAL(29, 659, 35), // "on_Selection_type_combo_box_c..."
QT_MOC_LITERAL(30, 695, 5), // "index"
QT_MOC_LITERAL(31, 701, 33), // "on_Insertion_radio_button_tog..."
QT_MOC_LITERAL(32, 735, 6), // "toggle"
QT_MOC_LITERAL(33, 742, 30), // "on_Brush_size_spin_box_changed"
QT_MOC_LITERAL(34, 773, 5), // "value"
QT_MOC_LITERAL(35, 779, 25), // "on_validateButton_clicked"
QT_MOC_LITERAL(36, 805, 27), // "on_SelectionOrEuler_changed"
QT_MOC_LITERAL(37, 833, 21), // "on_editionBox_changed"
QT_MOC_LITERAL(38, 855, 4), // "mode"
QT_MOC_LITERAL(39, 860, 36), // "on_Select_sharp_edges_button_..."
QT_MOC_LITERAL(40, 897, 31), // "on_Expand_reduce_button_clicked"
QT_MOC_LITERAL(41, 929, 16), // "new_item_created"
QT_MOC_LITERAL(42, 946, 7), // "item_id"
QT_MOC_LITERAL(43, 954, 26), // "item_about_to_be_destroyed"
QT_MOC_LITERAL(44, 981, 24), // "CGAL::Three::Scene_item*"
QT_MOC_LITERAL(45, 1006, 10), // "scene_item"
QT_MOC_LITERAL(46, 1017, 17) // "filter_operations"

    },
    "Polyhedron_demo_selection_plugin\0"
    "save_handleType\0\0set_operation_mode\0"
    "set_highlighting\0on_actionSelfIntersection_triggered\0"
    "connectItem\0Scene_polyhedron_selection_item*\0"
    "new_item\0isCurrentlySelected\0"
    "Scene_facegraph_item_k_ring_selection*\0"
    "item\0setInstructions\0s\0printMessage\0"
    "selection_action\0onTheFlyItem\0"
    "on_Select_all_button_clicked\0"
    "on_Select_all_NTButton_clicked\0"
    "on_Select_boundaryButton_clicked\0"
    "on_Add_to_selection_button_clicked\0"
    "on_Clear_button_clicked\0"
    "on_Clear_all_button_clicked\0"
    "on_Inverse_selection_button_clicked\0"
    "on_Select_isolated_components_button_clicked\0"
    "on_Get_minimum_button_clicked\0"
    "on_Create_selection_item_button_clicked\0"
    "on_LassoCheckBox_changed\0b\0"
    "on_Selection_type_combo_box_changed\0"
    "index\0on_Insertion_radio_button_toggled\0"
    "toggle\0on_Brush_size_spin_box_changed\0"
    "value\0on_validateButton_clicked\0"
    "on_SelectionOrEuler_changed\0"
    "on_editionBox_changed\0mode\0"
    "on_Select_sharp_edges_button_clicked\0"
    "on_Expand_reduce_button_clicked\0"
    "new_item_created\0item_id\0"
    "item_about_to_be_destroyed\0"
    "CGAL::Three::Scene_item*\0scene_item\0"
    "filter_operations"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_Polyhedron_demo_selection_plugin[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      32,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       3,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,  174,    2, 0x06 /* Public */,
       3,    1,  175,    2, 0x06 /* Public */,
       4,    1,  178,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
       5,    0,  181,    2, 0x0a /* Public */,
       6,    1,  182,    2, 0x0a /* Public */,
       9,    1,  185,    2, 0x0a /* Public */,
      12,    1,  188,    2, 0x0a /* Public */,
      14,    1,  191,    2, 0x0a /* Public */,
      15,    0,  194,    2, 0x0a /* Public */,
      16,    0,  195,    2, 0x0a /* Public */,
      17,    0,  196,    2, 0x0a /* Public */,
      18,    0,  197,    2, 0x0a /* Public */,
      19,    0,  198,    2, 0x0a /* Public */,
      20,    0,  199,    2, 0x0a /* Public */,
      21,    0,  200,    2, 0x0a /* Public */,
      22,    0,  201,    2, 0x0a /* Public */,
      23,    0,  202,    2, 0x0a /* Public */,
      24,    0,  203,    2, 0x0a /* Public */,
      25,    0,  204,    2, 0x0a /* Public */,
      26,    0,  205,    2, 0x0a /* Public */,
      27,    1,  206,    2, 0x0a /* Public */,
      29,    1,  209,    2, 0x0a /* Public */,
      31,    1,  212,    2, 0x0a /* Public */,
      33,    1,  215,    2, 0x0a /* Public */,
      35,    0,  218,    2, 0x0a /* Public */,
      36,    1,  219,    2, 0x0a /* Public */,
      37,    1,  222,    2, 0x0a /* Public */,
      39,    0,  225,    2, 0x0a /* Public */,
      40,    0,  226,    2, 0x0a /* Public */,
      41,    1,  227,    2, 0x0a /* Public */,
      43,    1,  230,    2, 0x0a /* Public */,
      46,    0,  233,    2, 0x0a /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,    2,
    QMetaType::Void, QMetaType::Bool,    2,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 7,    8,
    QMetaType::Void, 0x80000000 | 10,   11,
    QMetaType::Void, QMetaType::QString,   13,
    QMetaType::Void, QMetaType::QString,   13,
    QMetaType::Void,
    0x80000000 | 7,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Bool,   28,
    QMetaType::Void, QMetaType::Int,   30,
    QMetaType::Void, QMetaType::Bool,   32,
    QMetaType::Void, QMetaType::Int,   34,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,   30,
    QMetaType::Void, QMetaType::Int,   38,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,   42,
    QMetaType::Void, 0x80000000 | 44,   45,
    QMetaType::Void,

       0        // eod
};

void Polyhedron_demo_selection_plugin::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        Polyhedron_demo_selection_plugin *_t = static_cast<Polyhedron_demo_selection_plugin *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->save_handleType(); break;
        case 1: _t->set_operation_mode((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 2: _t->set_highlighting((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 3: _t->on_actionSelfIntersection_triggered(); break;
        case 4: _t->connectItem((*reinterpret_cast< Scene_polyhedron_selection_item*(*)>(_a[1]))); break;
        case 5: _t->isCurrentlySelected((*reinterpret_cast< Scene_facegraph_item_k_ring_selection*(*)>(_a[1]))); break;
        case 6: _t->setInstructions((*reinterpret_cast< QString(*)>(_a[1]))); break;
        case 7: _t->printMessage((*reinterpret_cast< QString(*)>(_a[1]))); break;
        case 8: _t->selection_action(); break;
        case 9: { Scene_polyhedron_selection_item* _r = _t->onTheFlyItem();
            if (_a[0]) *reinterpret_cast< Scene_polyhedron_selection_item**>(_a[0]) = std::move(_r); }  break;
        case 10: _t->on_Select_all_button_clicked(); break;
        case 11: _t->on_Select_all_NTButton_clicked(); break;
        case 12: _t->on_Select_boundaryButton_clicked(); break;
        case 13: _t->on_Add_to_selection_button_clicked(); break;
        case 14: _t->on_Clear_button_clicked(); break;
        case 15: _t->on_Clear_all_button_clicked(); break;
        case 16: _t->on_Inverse_selection_button_clicked(); break;
        case 17: _t->on_Select_isolated_components_button_clicked(); break;
        case 18: _t->on_Get_minimum_button_clicked(); break;
        case 19: _t->on_Create_selection_item_button_clicked(); break;
        case 20: _t->on_LassoCheckBox_changed((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 21: _t->on_Selection_type_combo_box_changed((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 22: _t->on_Insertion_radio_button_toggled((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 23: _t->on_Brush_size_spin_box_changed((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 24: _t->on_validateButton_clicked(); break;
        case 25: _t->on_SelectionOrEuler_changed((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 26: _t->on_editionBox_changed((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 27: _t->on_Select_sharp_edges_button_clicked(); break;
        case 28: _t->on_Expand_reduce_button_clicked(); break;
        case 29: _t->new_item_created((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 30: _t->item_about_to_be_destroyed((*reinterpret_cast< CGAL::Three::Scene_item*(*)>(_a[1]))); break;
        case 31: _t->filter_operations(); break;
        default: ;
        }
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        switch (_id) {
        default: *reinterpret_cast<int*>(_a[0]) = -1; break;
        case 4:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< Scene_polyhedron_selection_item* >(); break;
            }
            break;
        case 5:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< Scene_facegraph_item_k_ring_selection* >(); break;
            }
            break;
        case 30:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<int*>(_a[0]) = -1; break;
            case 0:
                *reinterpret_cast<int*>(_a[0]) = qRegisterMetaType< CGAL::Three::Scene_item* >(); break;
            }
            break;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (Polyhedron_demo_selection_plugin::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&Polyhedron_demo_selection_plugin::save_handleType)) {
                *result = 0;
                return;
            }
        }
        {
            typedef void (Polyhedron_demo_selection_plugin::*_t)(int );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&Polyhedron_demo_selection_plugin::set_operation_mode)) {
                *result = 1;
                return;
            }
        }
        {
            typedef void (Polyhedron_demo_selection_plugin::*_t)(bool );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&Polyhedron_demo_selection_plugin::set_highlighting)) {
                *result = 2;
                return;
            }
        }
    }
}

const QMetaObject Polyhedron_demo_selection_plugin::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_Polyhedron_demo_selection_plugin.data,
      qt_meta_data_Polyhedron_demo_selection_plugin,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *Polyhedron_demo_selection_plugin::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Polyhedron_demo_selection_plugin::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_Polyhedron_demo_selection_plugin.stringdata0))
        return static_cast<void*>(this);
    if (!strcmp(_clname, "Polyhedron_demo_plugin_helper"))
        return static_cast< Polyhedron_demo_plugin_helper*>(this);
    if (!strcmp(_clname, "Polyhedron_demo_io_plugin_interface"))
        return static_cast< Polyhedron_demo_io_plugin_interface*>(this);
    if (!strcmp(_clname, "com.geometryfactory.PolyhedronDemo.PluginInterface/1.0"))
        return static_cast< CGAL::Three::Polyhedron_demo_plugin_interface*>(this);
    if (!strcmp(_clname, "com.geometryfactory.PolyhedronDemo.IOPluginInterface/1.90"))
        return static_cast< CGAL::Three::Polyhedron_demo_io_plugin_interface*>(this);
    return QObject::qt_metacast(_clname);
}

int Polyhedron_demo_selection_plugin::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 32)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 32;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 32)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 32;
    }
    return _id;
}

// SIGNAL 0
void Polyhedron_demo_selection_plugin::save_handleType()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void Polyhedron_demo_selection_plugin::set_operation_mode(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 1, _a);
}

// SIGNAL 2
void Polyhedron_demo_selection_plugin::set_highlighting(bool _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
}

QT_PLUGIN_METADATA_SECTION const uint qt_section_alignment_dummy = 42;

#ifdef QT_NO_DEBUG

QT_PLUGIN_METADATA_SECTION
static const unsigned char qt_pluginMetaData[] = {
    'Q', 'T', 'M', 'E', 'T', 'A', 'D', 'A', 'T', 'A', ' ', ' ',
    'q',  'b',  'j',  's',  0x01, 0x00, 0x00, 0x00,
    'P',  0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    '<',  0x01, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00,
    0x03, 0x00, 'I',  'I',  'D',  0x00, 0x00, 0x00,
    '9',  0x00, 'c',  'o',  'm',  '.',  'g',  'e', 
    'o',  'm',  'e',  't',  'r',  'y',  'f',  'a', 
    'c',  't',  'o',  'r',  'y',  '.',  'P',  'o', 
    'l',  'y',  'h',  'e',  'd',  'r',  'o',  'n', 
    'D',  'e',  'm',  'o',  '.',  'I',  'O',  'P', 
    'l',  'u',  'g',  'i',  'n',  'I',  'n',  't', 
    'e',  'r',  'f',  'a',  'c',  'e',  '/',  '1', 
    '.',  '9',  '0',  0x00, 0x9b, 0x0c, 0x00, 0x00,
    0x09, 0x00, 'c',  'l',  'a',  's',  's',  'N', 
    'a',  'm',  'e',  0x00, ' ',  0x00, 'P',  'o', 
    'l',  'y',  'h',  'e',  'd',  'r',  'o',  'n', 
    '_',  'd',  'e',  'm',  'o',  '_',  's',  'e', 
    'l',  'e',  'c',  't',  'i',  'o',  'n',  '_', 
    'p',  'l',  'u',  'g',  'i',  'n',  0x00, 0x00,
    ':',  '!',  0xa1, 0x00, 0x07, 0x00, 'v',  'e', 
    'r',  's',  'i',  'o',  'n',  0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x05, 0x00, 'd',  'e', 
    'b',  'u',  'g',  0x00, 0x95, 0x16, 0x00, 0x00,
    0x08, 0x00, 'M',  'e',  't',  'a',  'D',  'a', 
    't',  'a',  0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
    0x94, 0x03, 0x00, 0x00, 0x08, 0x00, 'K',  'e', 
    'y',  'w',  'o',  'r',  'd',  's',  0x00, 0x00,
    '@',  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    '0',  0x00, 0x00, 0x00, 0x03, 0x00, 'P',  'M', 
    'P',  0x00, 0x00, 0x00, 0x02, 0x00, 'I',  'O', 
    0x0e, 0x00, 'C',  'l',  'a',  's',  's',  'i', 
    'f',  'i',  'c',  'a',  't',  'i',  'o',  'n', 
    0x06, 0x00, 'M',  'e',  's',  'h',  '_',  '3', 
    0x8b, 0x01, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00,
    0x0b, 0x03, 0x00, 0x00, 0x0b, 0x05, 0x00, 0x00,
    0x9b, 0x0d, 0x00, 0x00, 0x0a, 0x00, 'C',  'o', 
    'n',  'f',  'i',  'g',  'D',  'a',  't',  'e', 
    0x10, 0x00, '2',  '0',  '2',  '0',  '-',  '0', 
    '2',  '-',  '1',  '3',  ' ',  '2',  '2',  ':', 
    '4',  '3',  0x00, 0x00, '\\', 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0xa4, 0x00, 0x00, 0x00, 'T',  0x00, 0x00, 0x00,
    0x98, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00
};

#else // QT_NO_DEBUG

QT_PLUGIN_METADATA_SECTION
static const unsigned char qt_pluginMetaData[] = {
    'Q', 'T', 'M', 'E', 'T', 'A', 'D', 'A', 'T', 'A', ' ', ' ',
    'q',  'b',  'j',  's',  0x01, 0x00, 0x00, 0x00,
    'P',  0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    '<',  0x01, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00,
    0x03, 0x00, 'I',  'I',  'D',  0x00, 0x00, 0x00,
    '9',  0x00, 'c',  'o',  'm',  '.',  'g',  'e', 
    'o',  'm',  'e',  't',  'r',  'y',  'f',  'a', 
    'c',  't',  'o',  'r',  'y',  '.',  'P',  'o', 
    'l',  'y',  'h',  'e',  'd',  'r',  'o',  'n', 
    'D',  'e',  'm',  'o',  '.',  'I',  'O',  'P', 
    'l',  'u',  'g',  'i',  'n',  'I',  'n',  't', 
    'e',  'r',  'f',  'a',  'c',  'e',  '/',  '1', 
    '.',  '9',  '0',  0x00, 0x95, 0x0c, 0x00, 0x00,
    0x08, 0x00, 'M',  'e',  't',  'a',  'D',  'a', 
    't',  'a',  0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
    0x94, 0x03, 0x00, 0x00, 0x08, 0x00, 'K',  'e', 
    'y',  'w',  'o',  'r',  'd',  's',  0x00, 0x00,
    '@',  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    '0',  0x00, 0x00, 0x00, 0x03, 0x00, 'P',  'M', 
    'P',  0x00, 0x00, 0x00, 0x02, 0x00, 'I',  'O', 
    0x0e, 0x00, 'C',  'l',  'a',  's',  's',  'i', 
    'f',  'i',  'c',  'a',  't',  'i',  'o',  'n', 
    0x06, 0x00, 'M',  'e',  's',  'h',  '_',  '3', 
    0x8b, 0x01, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00,
    0x0b, 0x03, 0x00, 0x00, 0x0b, 0x05, 0x00, 0x00,
    0x9b, 0x0d, 0x00, 0x00, 0x0a, 0x00, 'C',  'o', 
    'n',  'f',  'i',  'g',  'D',  'a',  't',  'e', 
    0x10, 0x00, '2',  '0',  '2',  '0',  '-',  '0', 
    '2',  '-',  '1',  '3',  ' ',  '2',  '2',  ':', 
    '4',  '3',  0x00, 0x00, '\\', 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x9b, 0x1f, 0x00, 0x00,
    0x09, 0x00, 'c',  'l',  'a',  's',  's',  'N', 
    'a',  'm',  'e',  0x00, ' ',  0x00, 'P',  'o', 
    'l',  'y',  'h',  'e',  'd',  'r',  'o',  'n', 
    '_',  'd',  'e',  'm',  'o',  '_',  's',  'e', 
    'l',  'e',  'c',  't',  'i',  'o',  'n',  '_', 
    'p',  'l',  'u',  'g',  'i',  'n',  0x00, 0x00,
    '1',  0x00, 0x00, 0x00, 0x05, 0x00, 'd',  'e', 
    'b',  'u',  'g',  0x00, ':',  '!',  0xa1, 0x00,
    0x07, 0x00, 'v',  'e',  'r',  's',  'i',  'o', 
    'n',  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    'T',  0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00,
    ' ',  0x01, 0x00, 0x00, ',',  0x01, 0x00, 0x00
};
#endif // QT_NO_DEBUG

QT_MOC_EXPORT_PLUGIN(Polyhedron_demo_selection_plugin, Polyhedron_demo_selection_plugin)

QT_WARNING_POP
QT_END_MOC_NAMESPACE
